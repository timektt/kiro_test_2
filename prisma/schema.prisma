// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core application models
model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  password           String?   // For credentials provider
  image              String?
  bio                String?
  socialLinks        String?   @default("{}")
  role               String    @default("USER")
  isActive           Boolean   @default(true)
  emailNotifications Boolean @default(true)
  profileVisibility String @default("public") // public, followers, private
  showOnlineStatus Boolean @default(true)
  allowDirectMessages Boolean @default(true)
  showMBTI Boolean @default(true)
  showFollowersCount Boolean @default(true)
  showFollowingCount Boolean @default(true)
  allowMentions Boolean @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]        @relation("UserFollowers")
  following     Follow[]        @relation("UserFollowing")
  notifications Notification[]
  mbti          MBTI?
  rankings      Ranking[]
  
  // Chat relations
  chatParticipants ChatParticipant[]
  sentMessages     ChatMessage[]
  readMessages     ChatMessageRead[]
  
  // Privacy relations
  privacySettings PrivacySetting?
  blockedUsers    BlockedUser[] @relation("UserBlocks")
  blockedBy       BlockedUser[] @relation("UserBlocked")
  
  // Report relations
  reports         Report[] @relation("UserReports")
  reportedAgainst Report[] @relation("UserReported")
  reviewedReports Report[] @relation("AdminReviews")

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@index([isActive])
  @@map("users")
}

model MBTI {
  id          String   @id @default(cuid())
  type        String
  description String?
  userId      String   @unique
  assignedAt  DateTime @default(now())
  isLocked    Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@map("mbti")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  authorId  String
  isPublic  Boolean  @default(true)
  visibility String  @default("PUBLIC") // "PUBLIC", "FOLLOWERS_ONLY", "PRIVATE", "CUSTOM"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  reports  Report[]

  @@index([authorId])
  @@index([createdAt])
  @@index([isPublic])
  @@index([authorId, createdAt])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reports Report[]

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
  @@index([postId, createdAt])
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
  @@map("follows")
}

model Notification {
  id        String           @id @default(cuid())
  type      String
  message   String
  read      Boolean          @default(false)
  userId    String
  relatedId String?          // ID of related entity (post, user, etc.)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

model Ranking {
  id          String      @id @default(cuid())
  userId      String
  type        String
  score       Int         @default(0)
  rank        Int?
  period      String      // e.g., "2024-01", "2024-Q1", "all-time"
  calculatedAt DateTime   @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, period])
  @@index([type, period, score])
  @@index([userId])
  @@index([rank])
  @@index([calculatedAt])
  @@map("rankings")
}

// Real-time Chat Models
model Chat {
  id          String   @id @default(cuid())
  name        String?  // For group chats
  type        String   @default("DIRECT") // "DIRECT" or "GROUP"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastMessageAt DateTime?

  participants ChatParticipant[]
  messages     ChatMessage[]

  @@index([type])
  @@index([isActive])
  @@index([lastMessageAt])
  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  role      String   @default("MEMBER") // "ADMIN", "MEMBER"
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  isActive  Boolean  @default(true)

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@index([isActive])
  @@map("chat_participants")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("TEXT") // "TEXT", "IMAGE", "FILE", "SYSTEM"
  chatId    String
  senderId  String
  replyToId String?  // For replying to messages
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat    Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender  User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies ChatMessage[] @relation("MessageReplies")
  readBy  ChatMessageRead[]

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@index([chatId, createdAt])
  @@index([replyToId])
  @@map("chat_messages")
}

model ChatMessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([readAt])
  @@map("chat_message_reads")
}

// Privacy Models
model PrivacySetting {
  id     String @id @default(cuid())
  userId String @unique
  
  // Profile visibility
  profileVisibility    String @default("PUBLIC") // "PUBLIC", "FOLLOWERS_ONLY", "PRIVATE"
  showEmail           Boolean @default(false)
  showMBTI            Boolean @default(true)
  showBio             Boolean @default(true)
  showJoinDate        Boolean @default(true)
  showFollowerCount   Boolean @default(true)
  showFollowingCount  Boolean @default(true)
  
  // Post visibility
  defaultPostVisibility String @default("PUBLIC") // "PUBLIC", "FOLLOWERS_ONLY", "PRIVATE", "CUSTOM"
  allowComments        Boolean @default(true)
  allowLikes           Boolean @default(true)
  allowShares          Boolean @default(true)
  
  // Interaction settings
  allowDirectMessages Boolean @default(true)
  allowMentions       Boolean @default(true)
  allowTagging        Boolean @default(true)
  showOnlineStatus    Boolean @default(true)
  
  // Notification settings
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("privacy_settings")
}

model BlockedUser {
  id        String   @id @default(cuid())
  userId    String   // User who is blocking
  blockedId String   // User who is being blocked
  reason    String?  // Optional reason for blocking
  createdAt DateTime @default(now())
  
  user    User @relation("UserBlocks", fields: [userId], references: [id], onDelete: Cascade)
  blocked User @relation("UserBlocked", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blockedId])
  @@index([userId])
  @@index([blockedId])
  @@map("blocked_users")
}

// Report System Models
model Report {
  id          String   @id @default(cuid())
  type        String   // "POST", "USER", "COMMENT", "CHAT_MESSAGE"
  reason      String   // "SPAM", "HARASSMENT", "INAPPROPRIATE_CONTENT", "FAKE_ACCOUNT", "OTHER"
  description String?  // Additional details from reporter
  status      String   @default("PENDING") // "PENDING", "REVIEWED", "RESOLVED", "DISMISSED"
  priority    String   @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  
  // Reporter information
  reporterId  String
  reporter    User     @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  // Reported content/user
  reportedUserId    String?
  reportedUser      User?    @relation("UserReported", fields: [reportedUserId], references: [id], onDelete: Cascade)
  reportedPostId    String?
  reportedPost      Post?    @relation(fields: [reportedPostId], references: [id], onDelete: Cascade)
  reportedCommentId String?
  reportedComment   Comment? @relation(fields: [reportedCommentId], references: [id], onDelete: Cascade)
  
  // Admin handling
  reviewedById String?
  reviewedBy   User?    @relation("AdminReviews", fields: [reviewedById], references: [id])
  reviewedAt   DateTime?
  adminNotes   String?  // Internal notes for admins
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status])
  @@index([type])
  @@index([priority])
  @@index([reporterId])
  @@index([reportedUserId])
  @@index([createdAt])
  @@index([status, priority])
  @@map("reports")
}

// Note: SQLite doesn't support enums, so we use String types instead
// Valid values for role: "USER", "ADMIN", "MODERATOR"
// Valid values for notification type: "LIKE", "COMMENT", "FOLLOW", "MENTION", "SYSTEM", "CHAT_MESSAGE"
// Valid values for MBTI type: "INTJ", "INTP", "ENTJ", "ENTP", "INFJ", "INFP", "ENFJ", "ENFP", "ISTJ", "ISFJ", "ESTJ", "ESFJ", "ISTP", "ISFP", "ESTP", "ESFP"
// Valid values for ranking type: "POSTS_LIKES", "POSTS_COUNT", "COMMENTS_COUNT", "FOLLOWERS_COUNT", "ENGAGEMENT", "WEEKLY_ACTIVE", "MONTHLY_ACTIVE"
// Valid values for chat type: "DIRECT", "GROUP"
// Valid values for chat participant role: "ADMIN", "MEMBER"
// Valid values for chat message type: "TEXT", "IMAGE", "FILE", "SYSTEM"
// Valid values for profile visibility: "PUBLIC", "FOLLOWERS_ONLY", "PRIVATE"
// Valid values for post visibility: "PUBLIC", "FOLLOWERS_ONLY", "PRIVATE", "CUSTOM"
// Valid values for report type: "POST", "USER", "COMMENT", "CHAT_MESSAGE"
// Valid values for report reason: "SPAM", "HARASSMENT", "INAPPROPRIATE_CONTENT", "FAKE_ACCOUNT", "OTHER"
// Valid values for report status: "PENDING", "REVIEWED", "RESOLVED", "DISMISSED"
// Valid values for report priority: "LOW", "MEDIUM", "HIGH", "URGENT"