// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core application models
model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // For credentials provider
  image         String?
  bio           String?   @db.Text
  socialLinks   Json?     @default("{}")
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]        @relation("UserFollowers")
  following     Follow[]        @relation("UserFollowing")
  notifications Notification[]
  mbti          MBTI?
  rankings      Ranking[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([createdAt])
  @@index([isActive])
  @@map("users")
}

model MBTI {
  id          String   @id @default(cuid())
  type        MBTIType
  description String?
  userId      String   @unique
  assignedAt  DateTime @default(now())
  isLocked    Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@map("mbti")
}

model Post {
  id        String   @id @default(cuid())
  content   String   @db.Text
  imageUrl  String?
  authorId  String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@index([authorId])
  @@index([createdAt])
  @@index([isPublic])
  @@index([authorId, createdAt])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
  @@index([createdAt])
  @@index([postId, createdAt])
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@index([createdAt])
  @@map("likes")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
  @@map("follows")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  userId    String
  relatedId String?          // ID of related entity (post, user, etc.)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

model Ranking {
  id          String      @id @default(cuid())
  userId      String
  type        RankingType
  score       Int         @default(0)
  rank        Int?
  period      String      // e.g., "2024-01", "2024-Q1", "all-time"
  calculatedAt DateTime   @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, period])
  @@index([type, period, score])
  @@index([userId])
  @@index([rank])
  @@index([calculatedAt])
  @@map("rankings")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  SYSTEM
}

enum MBTIType {
  INTJ // Architect
  INTP // Thinker
  ENTJ // Commander
  ENTP // Debater
  INFJ // Advocate
  INFP // Mediator
  ENFJ // Protagonist
  ENFP // Campaigner
  ISTJ // Logistician
  ISFJ // Protector
  ESTJ // Executive
  ESFJ // Consul
  ISTP // Virtuoso
  ISFP // Adventurer
  ESTP // Entrepreneur
  ESFP // Entertainer
}

enum RankingType {
  POSTS_LIKES      // Total likes received on posts
  POSTS_COUNT      // Total number of posts
  COMMENTS_COUNT   // Total number of comments
  FOLLOWERS_COUNT  // Total number of followers
  ENGAGEMENT       // Combined engagement score
  WEEKLY_ACTIVE    // Weekly activity score
  MONTHLY_ACTIVE   // Monthly activity score
}